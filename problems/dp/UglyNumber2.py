# 264. Ugly Number II

''' An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.

Given an integer n, return the nth ugly number.

 

Example 1:

Input: n = 10
Output: 12
Explanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.
Example 2:

Input: n = 1
Output: 1
Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.
 '''

class Solution:
    def nthUglyNumber(self, n: int) -> int:
        # ugly numbers are which are generated by multiplying with 2,3,5 and their multiples in
        # the list

        # initially all the prime fators pointers will be pointing at 0th positon of the sequence
        pointer_1 = 0
        pointer_2 = 0
        pointer_3 = 0

        # 1 is not a prime factor, but we'll begin from 1
        sequence = [1]

        for i in range(n-1):

            # multiply each number in the sequence to the prime factors and select min among them
            # so that we'll have a sorted orderd numbers
            next_num = min(
                sequence[pointer_1] * 2,
                sequence[pointer_2] * 3,
                sequence[pointer_3] * 5,
            )

            sequence.append(next_num)

            # this repeated if statement avoids the duplicates, by incrementing the pointer
            # position if the next_num is already divisible by it
            if next_num % 2 == 0:
                pointer_1 += 1
            if next_num % 3 == 0:
                pointer_2 += 1
            if next_num % 5 == 0:
                pointer_3 += 1

        return sequence[n - 1]

